// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class Test {

  #region Extension registration
  public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
  }
  #endregion
  #region Static variables
  internal static pbd::MessageDescriptor internal__static_TestMsg__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::TestMsg, global::TestMsg.Builder> internal__static_TestMsg__FieldAccessorTable;
  #endregion
  #region Descriptor
  public static pbd::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbd::FileDescriptor descriptor;
  
  static Test() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        "Cgp0ZXN0LnByb3RvIkUKB1Rlc3RNc2cSDQoFcXVlcnkYASACKAkSEgoKcGFn" + 
        "ZW51bWJlchgCIAEoBRIXCg9yZXN1bHRfcGVyX3BhZ2UYAyABKAU=");
    pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
      descriptor = root;
      internal__static_TestMsg__Descriptor = Descriptor.MessageTypes[0];
      internal__static_TestMsg__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::TestMsg, global::TestMsg.Builder>(internal__static_TestMsg__Descriptor,
              new string[] { "Query", "Pagenumber", "ResultPerPage", });
      return null;
    };
    pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
        new pbd::FileDescriptor[] {
        }, assigner);
  }
  #endregion
  
}
#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class TestMsg : pb::GeneratedMessage<TestMsg, TestMsg.Builder> {
  private TestMsg() { }
  private static readonly TestMsg defaultInstance = new TestMsg().MakeReadOnly();
  private static readonly string[] _testMsgFieldNames = new string[] { "pagenumber", "query", "result_per_page" };
  private static readonly uint[] _testMsgFieldTags = new uint[] { 16, 10, 24 };
  public static TestMsg DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override TestMsg DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override TestMsg ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Test.internal__static_TestMsg__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<TestMsg, TestMsg.Builder> InternalFieldAccessors {
    get { return global::Test.internal__static_TestMsg__FieldAccessorTable; }
  }
  
  public const int QueryFieldNumber = 1;
  private bool hasQuery;
  private string query_ = "";
  public bool HasQuery {
    get { return hasQuery; }
  }
  public string Query {
    get { return query_; }
  }
  
  public const int PagenumberFieldNumber = 2;
  private bool hasPagenumber;
  private int pagenumber_;
  public bool HasPagenumber {
    get { return hasPagenumber; }
  }
  public int Pagenumber {
    get { return pagenumber_; }
  }
  
  public const int ResultPerPageFieldNumber = 3;
  private bool hasResultPerPage;
  private int resultPerPage_;
  public bool HasResultPerPage {
    get { return hasResultPerPage; }
  }
  public int ResultPerPage {
    get { return resultPerPage_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasQuery) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _testMsgFieldNames;
    if (hasQuery) {
      output.WriteString(1, field_names[1], Query);
    }
    if (hasPagenumber) {
      output.WriteInt32(2, field_names[0], Pagenumber);
    }
    if (hasResultPerPage) {
      output.WriteInt32(3, field_names[2], ResultPerPage);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasQuery) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Query);
      }
      if (hasPagenumber) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Pagenumber);
      }
      if (hasResultPerPage) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, ResultPerPage);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static TestMsg ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static TestMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static TestMsg ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static TestMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static TestMsg ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static TestMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static TestMsg ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static TestMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static TestMsg ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static TestMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private TestMsg MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(TestMsg prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<TestMsg, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(TestMsg cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private TestMsg result;
    
    private TestMsg PrepareBuilder() {
      if (resultIsReadOnly) {
        TestMsg original = result;
        result = new TestMsg();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override TestMsg MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::TestMsg.Descriptor; }
    }
    
    public override TestMsg DefaultInstanceForType {
      get { return global::TestMsg.DefaultInstance; }
    }
    
    public override TestMsg BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is TestMsg) {
        return MergeFrom((TestMsg) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(TestMsg other) {
      if (other == global::TestMsg.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasQuery) {
        Query = other.Query;
      }
      if (other.HasPagenumber) {
        Pagenumber = other.Pagenumber;
      }
      if (other.HasResultPerPage) {
        ResultPerPage = other.ResultPerPage;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_testMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _testMsgFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasQuery = input.ReadString(ref result.query_);
            break;
          }
          case 16: {
            result.hasPagenumber = input.ReadInt32(ref result.pagenumber_);
            break;
          }
          case 24: {
            result.hasResultPerPage = input.ReadInt32(ref result.resultPerPage_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasQuery {
      get { return result.hasQuery; }
    }
    public string Query {
      get { return result.Query; }
      set { SetQuery(value); }
    }
    public Builder SetQuery(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasQuery = true;
      result.query_ = value;
      return this;
    }
    public Builder ClearQuery() {
      PrepareBuilder();
      result.hasQuery = false;
      result.query_ = "";
      return this;
    }
    
    public bool HasPagenumber {
      get { return result.hasPagenumber; }
    }
    public int Pagenumber {
      get { return result.Pagenumber; }
      set { SetPagenumber(value); }
    }
    public Builder SetPagenumber(int value) {
      PrepareBuilder();
      result.hasPagenumber = true;
      result.pagenumber_ = value;
      return this;
    }
    public Builder ClearPagenumber() {
      PrepareBuilder();
      result.hasPagenumber = false;
      result.pagenumber_ = 0;
      return this;
    }
    
    public bool HasResultPerPage {
      get { return result.hasResultPerPage; }
    }
    public int ResultPerPage {
      get { return result.ResultPerPage; }
      set { SetResultPerPage(value); }
    }
    public Builder SetResultPerPage(int value) {
      PrepareBuilder();
      result.hasResultPerPage = true;
      result.resultPerPage_ = value;
      return this;
    }
    public Builder ClearResultPerPage() {
      PrepareBuilder();
      result.hasResultPerPage = false;
      result.resultPerPage_ = 0;
      return this;
    }
  }
  static TestMsg() {
    object.ReferenceEquals(global::Test.Descriptor, null);
  }
}

#endregion


#endregion Designer generated code
